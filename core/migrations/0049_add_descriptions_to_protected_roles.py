# Generated by Django 5.1.7 on 2025-10-13 18:12

from django.db import migrations


def add_role_descriptions(apps, schema_editor):
    """
    Add descriptive comments, acronyms, and aliases to protected roles.
    """
    Role = apps.get_model('core', 'Role')

    # Define role data: (name, acronym, aliases_csv, comment)
    role_data = {
        'Architect': (
            'ARCH',
            'Solution Architect, System Architect, Technical Architect',
            'Designs and oversees the technical architecture of systems and applications. '
            'Responsible for high-level design decisions, technology standards, and ensuring '
            'technical solutions align with business requirements.'
        ),
        'Developer': (
            'DEV',
            'Software Developer, Software Engineer, Programmer, Coder',
            'Writes, tests, and maintains application code. Implements features and fixes bugs '
            'according to specifications. Works within the technical architecture established by '
            'architects and technical leads.'
        ),
        'Lead Developer': (
            'LEAD',
            'Tech Lead, Development Lead, Lead Engineer, Senior Developer',
            'Leads a team of developers and provides technical guidance. Reviews code, makes '
            'technical decisions, and mentors junior developers. Acts as a bridge between '
            'developers and architects or management.'
        ),
        'Product Manager': (
            'PM',
            'Product Lead, Product Director',
            'Defines the product vision, strategy, and roadmap. Prioritizes features based on '
            'business value and customer needs. Works with stakeholders to gather requirements '
            'and ensures the product meets market demands.'
        ),
        'Product Owner': (
            'PO',
            'Backlog Owner, Product Backlog Owner',
            'In Scrum/Agile, represents stakeholders and customers to the development team. '
            'Manages and prioritizes the product backlog. Defines acceptance criteria and '
            'ensures delivered features meet business requirements.'
        ),
        'Project Manager': (
            'PM',
            'Program Manager, Delivery Manager',
            'Plans, executes, and closes projects. Manages project scope, timeline, budget, '
            'and resources. Coordinates between teams and stakeholders to ensure project '
            'objectives are met on time and within constraints.'
        ),
        'Scrum Master': (
            'SM',
            'Agile Coach, Scrum Coach, Scrum Facilitator',
            'Facilitates Scrum processes and ceremonies. Removes impediments for the development '
            'team. Coaches the team on Agile principles and ensures Scrum framework is followed. '
            'Protects the team from external interruptions.'
        ),
        'Stakeholder': (
            'STAKE',
            'Business Stakeholder, Key Stakeholder, Project Stakeholder',
            'A person or group with an interest in the project or product. Provides input on '
            'requirements, reviews deliverables, and may be impacted by project outcomes. '
            'Includes executives, end users, customers, and business partners.'
        ),
    }

    for role_name, (acronym, aliases_csv, comment) in role_data.items():
        roles = Role.objects.filter(name=role_name)
        if roles.exists():
            roles.update(
                acronym=acronym,
                aliases_csv=aliases_csv,
                comment=comment
            )
            print(f"Updated role '{role_name}' with description")
        else:
            print(f"Warning: Role '{role_name}' not found in database")


def remove_role_descriptions(apps, schema_editor):
    """
    Reverse migration: Remove descriptions from protected roles.
    """
    Role = apps.get_model('core', 'Role')

    protected_role_names = [
        'Architect',
        'Developer',
        'Lead Developer',
        'Product Manager',
        'Product Owner',
        'Project Manager',
        'Scrum Master',
        'Stakeholder',
    ]

    for role_name in protected_role_names:
        roles = Role.objects.filter(name=role_name)
        if roles.exists():
            roles.update(acronym=None, aliases_csv=None, comment=None)
            print(f"Removed descriptions from role '{role_name}'")


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0048_mark_additional_roles_as_protected'),
    ]

    operations = [
        migrations.RunPython(add_role_descriptions, remove_role_descriptions),
    ]
