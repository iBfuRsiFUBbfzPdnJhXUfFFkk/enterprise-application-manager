# Generated by Django 5.1.7 on 2025-10-30 23:55

from django.db import migrations, models


def migrate_billing_code_data(apps, schema_editor):
    """
    Migrate existing billing code relationships to the new M2M structure:
    1. For each Project with a code_billing string, create/find a BillingCode and link it
    2. For each BillingCode with a project FK, link it via the new M2M
    """
    Project = apps.get_model('core', 'Project')
    BillingCode = apps.get_model('core', 'BillingCode')

    # Migrate BillingCode.project FK relationships to M2M
    for billing_code in BillingCode.objects.filter(project__isnull=False):
        if billing_code.project:
            billing_code.projects.add(billing_code.project)

    # Migrate Project.code_billing varchar values to BillingCode objects
    for project in Project.objects.exclude(code_billing__isnull=True).exclude(code_billing=''):
        # Try to find an existing BillingCode with this billing_code value
        billing_code = BillingCode.objects.filter(billing_code=project.code_billing).first()

        if not billing_code:
            # Create a new BillingCode if one doesn't exist
            billing_code = BillingCode.objects.create(
                name=f"Auto-migrated: {project.code_billing}",
                billing_code=project.code_billing,
                comment=f"Automatically created during migration from Project: {project.name}"
            )

        # Link the billing code to the project via M2M
        project.billing_codes.add(billing_code)


def reverse_migrate_billing_code_data(apps, schema_editor):
    """
    Reverse migration - restore old relationships
    """
    Project = apps.get_model('core', 'Project')
    BillingCode = apps.get_model('core', 'BillingCode')

    # Restore Project.code_billing from M2M (take the first billing code if multiple exist)
    for project in Project.objects.all():
        billing_codes = project.billing_codes.all()
        if billing_codes.exists():
            first_billing_code = billing_codes.first()
            project.code_billing = first_billing_code.billing_code
            project.save(update_fields=['code_billing'])

    # Restore BillingCode.project FK from M2M (take the first project if multiple exist)
    for billing_code in BillingCode.objects.all():
        projects = billing_code.projects.all()
        if projects.exists():
            billing_code.project = projects.first()
            billing_code.save(update_fields=['project'])


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0068_historicalproject_project_manager_and_more'),
    ]

    operations = [
        # Step 1: Add the M2M field first (before removing old fields)
        migrations.AddField(
            model_name='project',
            name='billing_codes',
            field=models.ManyToManyField(blank=True, related_name='projects', to='core.billingcode'),
        ),
        # Step 2: Migrate data from old fields to new M2M relationships
        migrations.RunPython(migrate_billing_code_data, reverse_migrate_billing_code_data),
        # Step 3: Remove the old fields
        migrations.RemoveField(
            model_name='billingcode',
            name='project',
        ),
        migrations.RemoveField(
            model_name='historicalbillingcode',
            name='project',
        ),
        migrations.RemoveField(
            model_name='historicalproject',
            name='code_billing',
        ),
        migrations.RemoveField(
            model_name='project',
            name='code_billing',
        ),
    ]
