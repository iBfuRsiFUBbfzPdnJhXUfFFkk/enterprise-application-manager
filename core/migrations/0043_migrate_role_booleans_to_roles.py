# Generated by Django 5.1.7 on 2025-10-11 19:10

from django.db import migrations


def migrate_role_booleans_to_roles(apps, schema_editor):
    """
    Migrate boolean role fields to the Role model.
    For each boolean field that is True, create or get the corresponding Role
    and add it to the person's roles M2M relationship.
    """
    Person = apps.get_model('core', 'Person')
    Role = apps.get_model('core', 'Role')

    # Mapping of boolean field names to role names
    role_mappings = {
        'is_product_owner': 'Product Owner',
        'is_product_manager': 'Product Manager',
        'is_project_manager': 'Project Manager',
        'is_scrum_master': 'Scrum Master',
        'is_architect': 'Architect',
        'is_lead_developer': 'Lead Developer',
        'is_developer': 'Developer',
        'is_stakeholder': 'Stakeholder',
    }

    # Create or get roles
    roles_cache = {}
    for field_name, role_name in role_mappings.items():
        role, created = Role.objects.get_or_create(
            name=role_name,
            defaults={'acronym': None, 'aliases_csv': None, 'comment': None}
        )
        roles_cache[field_name] = role
        if created:
            print(f"Created role: {role_name}")
        else:
            print(f"Found existing role: {role_name}")

    # Migrate each person's boolean fields to roles
    people_count = Person.objects.count()
    print(f"\nMigrating roles for {people_count} people...")

    for person in Person.objects.all():
        roles_to_add = []

        for field_name, role in roles_cache.items():
            # Check if the boolean field is True
            if getattr(person, field_name, False):
                roles_to_add.append(role)
                print(f"  {person.name_first} {person.name_last}: Adding {role.name}")

        # Add all roles at once
        if roles_to_add:
            person.roles.add(*roles_to_add)

    print(f"\nMigration complete! Migrated role data for {people_count} people.")


def reverse_migration(apps, schema_editor):
    """
    Reverse the migration by setting boolean fields based on roles.
    This ensures data isn't lost if the migration is rolled back.
    """
    Person = apps.get_model('core', 'Person')
    Role = apps.get_model('core', 'Role')

    # Mapping of role names to boolean field names
    role_mappings = {
        'Product Owner': 'is_product_owner',
        'Product Manager': 'is_product_manager',
        'Project Manager': 'is_project_manager',
        'Scrum Master': 'is_scrum_master',
        'Architect': 'is_architect',
        'Lead Developer': 'is_lead_developer',
        'Developer': 'is_developer',
        'Stakeholder': 'is_stakeholder',
    }

    print("Reversing migration: Converting roles back to boolean fields...")

    for person in Person.objects.all():
        person_roles = person.roles.all()

        for role in person_roles:
            field_name = role_mappings.get(role.name)
            if field_name:
                setattr(person, field_name, True)
                print(f"  {person.name_first} {person.name_last}: Set {field_name} = True")

        person.save()

    print("Reverse migration complete!")


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0042_command_language_historicalcommand_language'),
    ]

    operations = [
        migrations.RunPython(migrate_role_booleans_to_roles, reverse_migration),
    ]
