# Generated by Django 5.1.7 on 2025-10-29 04:15

from django.db import migrations, models


def set_order_for_existing_items(apps, schema_editor):
    """Set order for existing estimation items based on their ID (previous ordering)."""
    EstimationItem = apps.get_model('core', 'EstimationItem')
    Estimation = apps.get_model('core', 'Estimation')

    # Process each estimation separately
    for estimation in Estimation.objects.all():
        # Get all items for this estimation, ordered by ID (the previous ordering)
        items = EstimationItem.objects.filter(estimation=estimation).order_by('id')

        # Assign order starting from 1
        for index, item in enumerate(items, start=1):
            item.order = index
            item.save(update_fields=['order'])


def reverse_set_order(apps, schema_editor):
    """Reverse migration - set order back to None."""
    EstimationItem = apps.get_model('core', 'EstimationItem')
    EstimationItem.objects.all().update(order=None)


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0057_estimationitem_code_reviewer_hours_and_more'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='estimationitem',
            options={'ordering': ['order', 'id'], 'verbose_name': 'Estimation Item', 'verbose_name_plural': 'Estimation Items'},
        ),
        migrations.AddField(
            model_name='estimationitem',
            name='order',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='historicalestimationitem',
            name='order',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.RunPython(set_order_for_existing_items, reverse_set_order),
    ]
